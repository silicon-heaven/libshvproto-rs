name: Rust Build and Artifact Creation

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write
  # For marocchino/sticky-pull-request-comment
  pull-requests: write

env:
  PROJECT_NAME: libshvproto
  HASH_FOR_FILENAMES: ${{github.event.pull_request.head.sha || github.sha}}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        toolchain: [stable, nightly]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}
        toolchain: ${{ matrix.toolchain }}
        override: true

    - name: Build and Install Binary
      run: |
        mkdir -p ${{github.workspace}}/install
        cargo install --path '${{github.workspace}}' --root '${{github.workspace}}/install' --target ${{ matrix.target }} --features cp2cp
      shell: bash

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.toolchain }}-binary
        path: ${{github.workspace}}/install/bin

  create-nightly-release:
    name: Create nightly
    if: github.ref == 'refs/heads/master'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Consolidate artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-latest-nightly-binary'
          merge-multiple: true

      - name: Rename artifacts
        run: |
          CP2CP_FILE_NAME="$(printf "cp2cp-nightly-g%s" "$(head -c 7 <<< '${{env.HASH_FOR_FILENAMES}}')")"
          mv cp2cp "${CP2CP_FILE_NAME}"
          mv cp2cp.exe "${CP2CP_FILE_NAME}.exe"

      - name: Remove previous Nightly assets
        run: |
          REPO='${{github.repository}}'
          readarray -t PREVIOUS_ASSETS < <(gh release --repo "$REPO" view nightly --json assets --jq .assets[].name)
          for PREVIOUS_ASSET in "${PREVIOUS_ASSETS[@]}"; do
            gh release --repo "$REPO" delete-asset nightly "${PREVIOUS_ASSET}" --yes
          done
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - uses: rickstaa/action-create-tag@v1
        with:
          tag: "nightly"
          force_push_tag: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: Nightly
          tag_name: nightly
          fail_on_unmatched_files: true
          body: |
            The latest and greatest.

            This is a nightly release. If you find any bugs, please report them to the repository's issue tracker.
          files: |
             cp2cp*

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-gnu
          toolchain: nightly
          override: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install pycobertura
        uses: insightsengineering/pip-action@v2
        with:
          packages: pycobertura==3.3.2

      - name: Checkout PR HEAD
        uses: actions/checkout@v4
        with:
          path: pr-head

      - name: Checkout master
        uses: actions/checkout@v4
        with:
          path: master
          ref: master

      - name: Generate code coverage
        run: |
          for CODE_DIR in master pr-head; do
            (
              cd "${{github.workspace}}/$CODE_DIR"
              cargo llvm-cov --all-features --cobertura --output-path '${{env.PROJECT_NAME}}-cobertura.xml'
            )
          done

      - name: Generate pycobertura text and HTML report
        run: |
          FAIL=no
          for FORMAT in markdown html; do
            pycobertura \
              show \
              --format "$FORMAT" \
              --source '${{github.workspace}}/pr-head' \
              --output "${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-show-${{env.HASH_FOR_FILENAMES}}.$FORMAT" \
              '${{github.workspace}}/pr-head/${{env.PROJECT_NAME}}-cobertura.xml' || FAIL=yes

            pycobertura \
              diff \
              --format "$FORMAT" \
              --no-color \
              --source1 '${{github.workspace}}/master' \
              --source2 '${{github.workspace}}/pr-head' \
              --output "${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-diff-${{env.HASH_FOR_FILENAMES}}.$FORMAT" \
              '${{github.workspace}}/master/${{env.PROJECT_NAME}}-cobertura.xml' \
              '${{github.workspace}}/pr-head/${{env.PROJECT_NAME}}-cobertura.xml' || FAIL=yes
          done

          cat '${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-show-${{env.HASH_FOR_FILENAMES}}.markdown'
          echo
          cat '${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-diff-${{env.HASH_FOR_FILENAMES}}.markdown'

          echo "FAIL=$FAIL" >> "$GITHUB_ENV"

      - name: Upload HTML reports
        id: html-reports
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-cov-html-${{env.HASH_FOR_FILENAMES}}
          path: ${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-*-${{env.HASH_FOR_FILENAMES}}.html

      - name: Generate sticky comment contents
        run: |
          # shellcheck disable=SC2016
          {
            echo '## Code coverage report for ${{env.HASH_FOR_FILENAMES}}'

            echo '#### Coverage difference'
            if [[ ${{ env.FAIL }} = yes ]]; then
              echo Code coverage worsened.
            else
              echo All new changes were covered.
            fi
            cat '${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-diff-${{env.HASH_FOR_FILENAMES}}.markdown'

            echo
            echo

            echo '#### Overall coverage'
            echo '<details>'
            echo '<summary>Click to expand</summary>'
            echo '<span>'
            echo
            cat '${{github.workspace}}/${{env.PROJECT_NAME}}-pycobertura-show-${{env.HASH_FOR_FILENAMES}}.markdown'
            echo
            echo '</span>'
            echo '</details>'

            echo
            echo '#### HTML reports'
            echo 'You can use _GitHub CLI_ to download HTML coverage reports and open them automatically using this command:'
            echo '```bash'
            echo '(cd "$(mktemp -d)" && gh run -R ${{github.repository}} download -n ${{env.PROJECT_NAME}}-cov-html-${{env.HASH_FOR_FILENAMES}} && ls -1 | xargs -n1 xdg-open)'
            echo '```'
            echo
            echo 'You can download the HTML reports manually [here](${{steps.html-reports.outputs.artifact-url}})'.
            echo
          } > sticky-comment.md

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: sticky-comment.md
      - name: Fail if coverage is worse
        run: |
          if [[ ${{ env.FAIL }} = yes ]]; then
            false
          fi
